demo.js(main file):-

let express = require('express');
let chalk = require('chalk');
let bodyparser = require('body-parser');
let authanticationroute = require('./routes/auth'); 

let app = express();
app.use(express.json());
app.use('/api/user',authanticationroute);



let port = 3000;

app.listen(port,()=>{
   console.log(  chalk.bgBlue.black("up & running"));
});

auth.js(route):-

let route = require('express').Router();
let chalk = require('chalk');
let mongoose = require('mongoose');
let bodyparser = require('body-parser');

let bcrypt = require('bcryptjs');
let User = require('../model/user');
let { registervalidation } = require('../routes/validation');

mongoose.connect('mongodb://localhost/authantication')
    .then(() => {
        console.log(chalk.bgGreenBright.black("connected to mongoose"));
    })
    .catch(() => {
        console.log(chalk.bgRedBright.black("cant not connect to mongoose"));
    });



route.post('/register', async (req, res) => {
  //validation
    let { error } = registervalidation(req.body)
    if (error) {
        return res.status(400).send(error.details[0].message); 
    }
    
    //hash password
    let salt = await bcrypt.genSalt(10);
     
    let hashpassword = await bcrypt.hash(req.body.password, salt);


    let user = new User({
        name: req.body.name,
        email: req.body.email,
        password: hashpassword,
    });

    try {
        let saveduser = await user.save();

        res.status(200).send({ user:user._id });

    }
    catch (err) {
        res.status(400).send(err);
    }


});


module.exports = route;

validation.js(rout):-

let joi = require('joi');

let registervalidation = (data)=>{
    let schema = {
        name: joi.string().min(3).required(),
        email: joi.string().required().email(),
        password: joi.string().required().min(6)
    }
  return  joi.validate(data,schema);
   
}

let loginvalidation = (data)=>{
    let schema = {
        email: joi.string().required().email(),
        password: joi.string().required().min(6)
    }
  return  joi.validate(data,schema);
   
}

module.exports.registervalidation = registervalidation;
module.exports.loginvalidation = loginvalidation;



user.js(model):-

let mongoose = require('mongoose');

let userschema = new mongoose.Schema({
    name:{  type: String, required:true, min: 6},
    email: {  type:String, required: true},
    password: {  type: String, required:true},
    date:{ type:Date, default:Date.now() }
});

let User = mongoose.model('users',userschema);

module.exports = User;



                          # with login

route.post('/login',async (req,res)=>{
    let { error } = loginvalidation(req.body)
    if (error) {
        return res.status(400).send(error.details[0].message); 
    }

    let user1 =  await User.findOne({  email: req.body.email });
    if(!user1){
         return res.status(400).send("incorrect email or password please try again");
    }
      //check password:-
      let validpass = await bcrypt.compare(req.body.password , user1.password)
      if(!validpass){
         return res.status(400).send("please enter correct password to login");
      }

      res.send("successfully loggedin");
});






https://www.youtube.com/watch?v=2jqok-WgelI  25:30